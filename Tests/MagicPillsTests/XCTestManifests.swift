#if !canImport(ObjectiveC)
import XCTest

extension ArrayExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArrayExtensionsTests = [
        ("test_append_if_not_exists", test_append_if_not_exists),
        ("test_remove_existing_object", test_remove_existing_object),
        ("test_remove_unexisting_object", test_remove_unexisting_object),
        ("test_unique", test_unique),
    ]
}

extension BoolExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BoolExtensionsTests = [
        ("test_is_false", test_is_false),
    ]
}

extension BundleExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BundleExtensionsTests = [
        ("test_build_number", test_build_number),
        ("test_full_version_number_when_value_are_different", test_full_version_number_when_value_are_different),
        ("test_full_version_number_when_value_are_equals", test_full_version_number_when_value_are_equals),
        ("test_full_version_number_when_value_are_not_present", test_full_version_number_when_value_are_not_present),
        ("test_version_number", test_version_number),
    ]
}

extension DateExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DateExtensionsTests = [
        ("test_date_parts", test_date_parts),
        ("test_init_with_formatted_spanishDate", test_init_with_formatted_spanishDate),
        ("test_init_with_milliseconds", test_init_with_milliseconds),
        ("test_is_in_the_first_eleven_days_of_the_month", test_is_in_the_first_eleven_days_of_the_month),
        ("test_is_today", test_is_today),
        ("test_spanish_format_date", test_spanish_format_date),
        ("test_time_format", test_time_format),
    ]
}

extension DecimalExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DecimalExtensionsTests = [
        ("test_convert_miliseconds_to_minutes", test_convert_miliseconds_to_minutes),
        ("test_convert_miliseconds_to_seconds", test_convert_miliseconds_to_seconds),
        ("test_convert_seconds_to_minutes", test_convert_seconds_to_minutes),
        ("test_format_currency", test_format_currency),
        ("test_format_megabit_in_spanish_format", test_format_megabit_in_spanish_format),
        ("test_format_megabytes_in_spanish_format", test_format_megabytes_in_spanish_format),
    ]
}

extension DefinesPrimaryKeyTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DefinesPrimaryKeyTests = [
        ("test_wrapped_value", test_wrapped_value),
    ]
}

extension DictionaryExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DictionaryExtensionsTests = [
        ("test_getorput", test_getorput),
    ]
}

extension DispatchQueueExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DispatchQueueExtensionsTests = [
        ("test_ismain", test_ismain),
    ]
}

extension FoldTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FoldTests = [
        ("test_closure_parameters", test_closure_parameters),
        ("test_composing_word", test_composing_word),
    ]
}

extension OptionableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OptionableTests = [
        ("test_filter_nil", test_filter_nil),
        ("test_wrapped_value", test_wrapped_value),
    ]
}

extension OptionalExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OptionalExtensionsTests = [
        ("test_is_falsy_for_bool_wrapped", test_is_falsy_for_bool_wrapped),
        ("test_is_nil", test_is_nil),
        ("test_is_not_nil", test_is_not_nil),
        ("test_is_truthy_for_bool_wrapped", test_is_truthy_for_bool_wrapped),
    ]
}

extension OrderedSetTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OrderedSetTests = [
        ("test_add_repeated_items", test_add_repeated_items),
        ("test_empty", test_empty),
        ("test_enumerated", test_enumerated),
        ("test_foreach", test_foreach),
        ("test_insert_remove_elements", test_insert_remove_elements),
        ("test_one_element", test_one_element),
        ("test_smallest_and_largest", test_smallest_and_largest),
        ("test_three_values_order", test_three_values_order),
        ("test_with_values_thar_are_equal_but_dont_have_the_same_value", test_with_values_thar_are_equal_but_dont_have_the_same_value),
    ]
}

extension SequenceExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SequenceExtensionsTests = [
        ("test_group", test_group),
    ]
}

extension SharedDictionaryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SharedDictionaryTests = [
        ("test_getorput", test_getorput),
        ("test_init", test_init),
    ]
}

extension StringExtensionsFormatingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringExtensionsFormatingTests = [
        ("test_format_phone", test_format_phone),
        ("test_underlined", test_underlined),
    ]
}

extension StringExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringExtensionsTests = [
        ("test_base64_encode_and_decode", test_base64_encode_and_decode),
        ("test_bodyRange", test_bodyRange),
        ("test_capitalized_first_letter", test_capitalized_first_letter),
        ("test_capitalized_sentences", test_capitalized_sentences),
        ("test_capitalized_words", test_capitalized_words),
        ("test_first_range_ocurrence", test_first_range_ocurrence),
        ("test_html_value", test_html_value),
        ("test_localized", test_localized),
        ("test_lowercased_all_least_the_first_unchanged", test_lowercased_all_least_the_first_unchanged),
        ("test_nsRange_of_string", test_nsRange_of_string),
        ("test_ocurrences_ranges", test_ocurrences_ranges),
        ("test_removing_whitespaces", test_removing_whitespaces),
        ("test_replacing_regex_matches", test_replacing_regex_matches),
        ("test_satisfies_regex", test_satisfies_regex),
        ("test_utf8_convertion", test_utf8_convertion),
    ]
}

extension StringExtensionsValidatorsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringExtensionsValidatorsTests = [
        ("test_is_not_valid_email", test_is_not_valid_email),
        ("test_is_not_valid_nie", test_is_not_valid_nie),
        ("test_is_not_valid_nif", test_is_not_valid_nif),
        ("test_is_not_valid_phone", test_is_not_valid_phone),
        ("test_is_valid_email", test_is_valid_email),
        ("test_is_valid_nie", test_is_valid_nie),
        ("test_is_valid_nif", test_is_valid_nif),
        ("test_is_valid_phone", test_is_valid_phone),
    ]
}

extension StringExtensionsValuesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringExtensionsValuesTests = [
        ("test_bool_value", test_bool_value),
        ("test_date_value", test_date_value),
        ("test_url_value", test_url_value),
    ]
}

extension TimeIntervalExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TimeIntervalExtensionsTests = [
        ("test_formatted_for_negative_values", test_formatted_for_negative_values),
        ("test_formatted_for_positive_values", test_formatted_for_positive_values),
    ]
}

extension URLExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__URLExtensionsTests = [
        ("test_comparable", test_comparable),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ArrayExtensionsTests.__allTests__ArrayExtensionsTests),
        testCase(BoolExtensionsTests.__allTests__BoolExtensionsTests),
        testCase(BundleExtensionsTests.__allTests__BundleExtensionsTests),
        testCase(DateExtensionsTests.__allTests__DateExtensionsTests),
        testCase(DecimalExtensionsTests.__allTests__DecimalExtensionsTests),
        testCase(DefinesPrimaryKeyTests.__allTests__DefinesPrimaryKeyTests),
        testCase(DictionaryExtensionsTests.__allTests__DictionaryExtensionsTests),
        testCase(DispatchQueueExtensionsTests.__allTests__DispatchQueueExtensionsTests),
        testCase(FoldTests.__allTests__FoldTests),
        testCase(OptionableTests.__allTests__OptionableTests),
        testCase(OptionalExtensionsTests.__allTests__OptionalExtensionsTests),
        testCase(OrderedSetTests.__allTests__OrderedSetTests),
        testCase(SequenceExtensionsTests.__allTests__SequenceExtensionsTests),
        testCase(SharedDictionaryTests.__allTests__SharedDictionaryTests),
        testCase(StringExtensionsFormatingTests.__allTests__StringExtensionsFormatingTests),
        testCase(StringExtensionsTests.__allTests__StringExtensionsTests),
        testCase(StringExtensionsValidatorsTests.__allTests__StringExtensionsValidatorsTests),
        testCase(StringExtensionsValuesTests.__allTests__StringExtensionsValuesTests),
        testCase(TimeIntervalExtensionsTests.__allTests__TimeIntervalExtensionsTests),
        testCase(URLExtensionsTests.__allTests__URLExtensionsTests),
    ]
}
#endif
